// src/app/earnings-analyzer/components/QuarterSelector.js
'use client'

import { useState, useEffect } from 'react'
import { Calendar, Download, FileJson, FileText } from 'lucide-react'

export default function QuarterSelector({ quarters, selectedQuarter, setSelectedQuarter, data }) {
  const [showDownloadMenu, setShowDownloadMenu] = useState(false)

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (showDownloadMenu && !e.target.closest('.download-menu-container')) {
        setShowDownloadMenu(false)
      }
    }
    
    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [showDownloadMenu])

  const downloadJSON = () => {
    const quarterData = data.quarterly_results[selectedQuarter]
    const exportData = {
      company: data.company,
      ticker: data.ticker,
      quarter: selectedQuarter,
      analysis_date: new Date().toISOString(),
      data: quarterData
    }
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${data.ticker}_${selectedQuarter}_Analysis.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    setShowDownloadMenu(false)
  }

  const downloadMarkdown = () => {
    const quarterData = data.quarterly_results[selectedQuarter]
    
    let markdown = `# ${data.company} (${data.ticker}) - ${selectedQuarter.replace('_', ' ')} Analysis\n\n`
    markdown += `**Analysis Date:** ${new Date().toLocaleDateString()}\n\n`
    markdown += `---\n\n`
    
    // Executive Summary
    markdown += `## Executive Summary\n\n`
    markdown += `- **Sentiment Score:** ${(quarterData.sentiment_score * 100).toFixed(1)}%\n`
    markdown += `- **Stock Price:** $${quarterData.stock_price?.toFixed(2) || 'N/A'}\n`
    markdown += `- **Earnings Reaction:** ${quarterData.earnings_reaction > 0 ? '+' : ''}${quarterData.earnings_reaction}%\n\n`
    
    // Financial Metrics
    if (quarterData.actuals) {
      markdown += `## Financial Performance\n\n`
      markdown += `- **Revenue:** ${quarterData.actuals.actual_revenue}\n`
      markdown += `- **EPS:** ${quarterData.actuals.actual_eps}\n`
      markdown += `- **Operating Margin:** ${quarterData.actuals.actual_operating_margin}\n`
      if (quarterData.actuals.actual_subscribers) {
        markdown += `- **Subscribers:** ${quarterData.actuals.actual_subscribers}\n`
      }
      markdown += `\n`
    }
    
    // Business Segments
    if (quarterData.topic_analysis?.business_segments_discussed) {
      markdown += `## Business Segments\n\n`
      quarterData.topic_analysis.business_segments_discussed.forEach(segment => {
        markdown += `### ${segment.segment_name}\n\n`
        if (segment.financial_evidence?.revenue) {
          markdown += `- **Revenue:** ${segment.financial_evidence.revenue}\n`
        }
        if (segment.financial_evidence?.growth_rate) {
          markdown += `- **Growth Rate:** ${segment.financial_evidence.growth_rate}\n`
        }
        if (segment.key_developments) {
          markdown += `- **Key Developments:** ${segment.key_developments}\n`
        }
        markdown += `\n`
      })
    }
    
    // Strategic Themes
    if (quarterData.topic_analysis?.strategic_themes) {
      markdown += `## Strategic Themes\n\n`
      quarterData.topic_analysis.strategic_themes.forEach(theme => {
        markdown += `### ${theme.theme_name}\n\n`
        markdown += `${theme.description}\n\n`
        if (theme.key_initiatives) {
          markdown += `**Key Initiatives:**\n`
          theme.key_initiatives.forEach(init => {
            markdown += `- ${init}\n`
          })
          markdown += `\n`
        }
      })
    }
    
    // Opportunities
    if (quarterData.topic_analysis?.opportunities) {
      markdown += `## Opportunities\n\n`
      quarterData.topic_analysis.opportunities.forEach(opp => {
        markdown += `- **${opp.opportunity}** (${opp.category}): ${opp.description}\n`
      })
      markdown += `\n`
    }
    
    // Risk Factors
    if (quarterData.topic_analysis?.risk_factors) {
      markdown += `## Risk Factors\n\n`
      quarterData.topic_analysis.risk_factors.forEach(risk => {
        markdown += `- **${risk.risk}** (${risk.severity}): ${risk.description}\n`
      })
      markdown += `\n`
    }
    
    markdown += `\n---\n\n`
    markdown += `*Generated by Earnings Intelligence Platform*\n`
    
    const blob = new Blob([markdown], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${data.ticker}_${selectedQuarter}_Analysis.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    setShowDownloadMenu(false)
  }

  return (
    <>
      {/* Vertical Sidebar - Fixed Position */}
      <div className="fixed left-0 top-0 h-screen w-80 bg-slate-900/98 backdrop-blur-xl border-r border-blue-400/30 shadow-2xl z-50 flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-white/10">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-bold flex items-center gap-2 text-white">
              <Calendar className="w-5 h-5 text-blue-400" />
              Quarter Analysis
            </h3>
          </div>
          
          {/* Download Button */}
          <div className="relative download-menu-container">
            <button
              onClick={() => setShowDownloadMenu(!showDownloadMenu)}
              className="w-full flex items-center justify-center gap-2 bg-blue-500/20 hover:bg-blue-500/30 border border-blue-400/40 text-blue-300 px-4 py-2 rounded-lg font-semibold transition-all"
            >
              <Download className="w-4 h-4" />
              Download Report
            </button>
            
            {showDownloadMenu && (
              <div className="absolute left-0 right-0 mt-2 bg-slate-800 border border-blue-400/30 rounded-lg shadow-xl overflow-hidden z-50">
                <button
                  onClick={downloadJSON}
                  className="w-full flex items-center gap-3 px-4 py-3 hover:bg-blue-500/20 transition-colors text-left"
                >
                  <FileJson className="w-5 h-5 text-blue-400" />
                  <div>
                    <div className="text-white font-semibold">JSON Data</div>
                    <div className="text-xs text-gray-400">Raw analysis data</div>
                  </div>
                </button>
                <button
                  onClick={downloadMarkdown}
                  className="w-full flex items-center gap-3 px-4 py-3 hover:bg-blue-500/20 transition-colors text-left border-t border-white/10"
                >
                  <FileText className="w-5 h-5 text-green-400" />
                  <div>
                    <div className="text-white font-semibold">Markdown Report</div>
                    <div className="text-xs text-gray-400">Formatted summary</div>
                  </div>
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Quarter Buttons - Vertical Stack */}
        <div className="flex-1 overflow-y-auto p-6 space-y-4">
          {quarters.map((q) => {
            const quarterData = data.quarterly_results[q]
            const isSelected = selectedQuarter === q
            return (
              <button
                key={q}
                onClick={() => setSelectedQuarter(q)}
                className={`w-full p-5 rounded-lg border-2 transition-all text-left ${
                  isSelected
                    ? 'bg-blue-500/30 border-blue-400 shadow-lg shadow-blue-500/20 scale-105'
                    : 'bg-black/30 border-white/10 hover:border-white/30 hover:scale-102'
                }`}
              >
                <div className="text-xl font-bold text-white mb-2">
                  {q.replace('_', ' ')}
                </div>
                <div className="space-y-1">
                  <div className="text-sm text-gray-300">
                    Sentiment: <span className="font-semibold text-blue-400">{(quarterData.sentiment_score * 100).toFixed(0)}%</span>
                  </div>
                  <div className="text-sm text-gray-300">
                    Stock: <span className="font-semibold text-green-400">${quarterData.stock_price.toFixed(2)}</span>
                  </div>
                  <div className={`text-sm font-semibold ${
                    quarterData.earnings_reaction > 0 ? 'text-green-400' : 'text-red-400'
                  }`}>
                    {quarterData.earnings_reaction > 0 ? '+' : ''}{quarterData.earnings_reaction}% reaction
                  </div>
                </div>
                
                {isSelected && (
                  <div className="mt-3 pt-3 border-t border-blue-400/30">
                    <div className="text-xs text-blue-300 font-semibold">
                      ‚Üê Currently Viewing
                    </div>
                  </div>
                )}
              </button>
            )
          })}
        </div>

        {/* Footer Info */}
        <div className="p-4 border-t border-white/10 bg-black/20">
          <div className="text-xs text-gray-400 text-center">
            {data.company} ({data.ticker})
          </div>
          <div className="text-xs text-gray-500 text-center mt-1">
            AI-Powered Analysis
          </div>
        </div>
      </div>

      {/* Spacer for content - pushes main content to the right */}
      <div className="w-80 flex-shrink-0" />
    </>
  )
}